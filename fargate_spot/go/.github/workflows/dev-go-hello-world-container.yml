name: dev Auto Build and Push to ECR

on:
  workflow_dispatch:
    inputs:
      force_deploy:
        required: true
        type: boolean
        description: forced deployment flag
        default: false
  pull_request:
    paths:
      - '.github/workflows/dev-go-hello-world-container.yml'
      - 'go-hello-world-container/**'
      - '00_IaC/**'
      - '!**.md'
    branches: [develop]
    types: [closed]

permissions:
  id-token: write
  contents: write

jobs:
  build-and-push:
    name: Build and Push for dev
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: ${{ github.event.pull_request.merged || github.event.inputs.force_deploy }}
    env:
      ENV: ${{ secrets.ENV_DEV }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          role-session-name: github-actions-session-for-go-hello-world-container
          role-duration-seconds: 900

      - name: Run npm install for actions
        working-directory: ./.github/actions/get-ssm-parameters
        run: npm install

      - name: Get SSM Parameters
        id: ssm-parameters
        uses: ./.github/actions/get-ssm-parameters
        with:
          default_region: ${{ secrets.AWS_DEFAULT_REGION }}
          ssm_path_name: ${{ secrets.AWS_SSM_PATH_NAME }}
          env: ${{ secrets.ENV_DEV }}
          cd_parameters: |-
            TERRAFORM_BUCKET
            TERRAFORM_DYNAMO_TABLE
            SLACK_WEBHOOK_GH_NOTIFY
          parameters: |-
            VPC_ID
            SUBNET1
            SUBNET2
            SUBNET3

      - name: Set SSM Parameters
        id: set-secrets
        env:
          SSM_PARAMETERS: ${{ steps.ssm-parameters.outputs.ssm_parameters }}
        run: |
          PARAMETERS_ARRAY=( \
            TERRAFORM_BUCKET \
            TERRAFORM_DYNAMO_TABLE \
            SLACK_WEBHOOK_GH_NOTIFY \
            VPC_ID \
            SUBNET1 \
            SUBNET2 \
            SUBNET3 \
          )
          for key in "${PARAMETERS_ARRAY[@]}"; \
          do \
              VAR_VALUE="$(jq --arg var_name $key -r '.[$var_name]' <(echo "${SSM_PARAMETERS}"))"; \
              SET_OUTPUT_STRING="::set-output name=${key}::${VAR_VALUE}"; \
              echo "${SET_OUTPUT_STRING}"; \
          done

      - name: Delete node modules for actions
        working-directory: ./.github/actions/get-ssm-parameters
        run: rm -rf node_modules

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Exec git tag command
        id: set-tag
        run: |
          echo "$(TZ=Asia/Tokyo date +%Y%m%d-%H%M%S)" > TAG_NAME
          TAG_NAME=$ENV-$(cat TAG_NAME)
          git tag $TAG_NAME
          git push origin $TAG_NAME
          echo "::set-output name=TAG_NAME::$TAG_NAME"

      - name: Build, Tag and Push Image to Amazon ECR
        working-directory: ./go-hello-world-container
        id: push-image
        env:
          ECR_REPOSITORY: ${{ steps.set-secrets.outputs.PJ_PREFIX }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          TAG_NAME: ${{ steps.set-tag.outputs.TAG_NAME }}
        run: |
          IMAGE_NAME=$ECR_REPOSITORY:$TAG_NAME
          docker build --target runner -t $IMAGE_NAME -f ./docker/app/Dockerfile .
          docker tag $IMAGE_NAME $ECR_REGISTRY/$IMAGE_NAME
          docker push $ECR_REGISTRY/$IMAGE_NAME
          echo "::set-output name=IMAGE_NAME::$IMAGE_NAME"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.9

      - name: Generate backend setting file
        working-directory: ./00_IaC/terraform/environments/dev
        env:
          TERRAFORM_BUCKET: ${{ steps.set-secrets.outputs.TERRAFORM_BUCKET }}
          TERRAFORM_DYNAMO_TABLE: ${{ steps.set-secrets.outputs.TERRAFORM_DYNAMO_TABLE }}
        run: |
          TARGET_FILE=${ENV}.tfbackend
          echo $(eval echo 'bucket=\"${TERRAFORM_BUCKET}\"') >> ${TARGET_FILE}
          echo $(eval echo 'region=\"${{ secrets.AWS_DEFAULT_REGION }}\"') >> ${TARGET_FILE}
          echo $(eval echo 'key=\"${{ secrets.PJ_PREFIX }}/${ENV}/terraform.tfstate\"') >> ${TARGET_FILE}
          echo $(eval echo 'encrypt=\"true\"') >> ${TARGET_FILE}
          echo $(eval echo 'dynamodb_table=\"${TERRAFORM_DYNAMO_TABLE}\"') >> ${TARGET_FILE}
          terraform fmt

      - name: Update by Terraform
        working-directory: ./00_IaC/terraform/environments/dev
        env:
          VPC_ID: ${{ steps.set-secrets.outputs.VPC_ID }}
          IMAGE_VERSION: ${{ steps.set-tag.outputs.TAG_NAME }}
          SUBNET1: ${{ steps.set-secrets.outputs.SUBNET1 }}
          SUBNET2: ${{ steps.set-secrets.outputs.SUBNET2 }}
          SUBNET3: ${{ steps.set-secrets.outputs.SUBNET3 }}
        run: |
          terraform init -backend-config=${ENV}.tfbackend
          terraform fmt -recursive -check
          terraform validate
          terraform apply \
            -auto-approve \
            -var "aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
            -var "aws_default_region=${{ secrets.AWS_DEFAULT_REGION }}" \
            -var "pj_prefix=${{ secrets.PJ_PREFIX }}" \
            -var "env=${{ secrets.ENV_DEV }}" \
            -var "vpc_id=$VPC_ID" \
            -var "image_version=$IMAGE_VERSION" \
            -var "subnet1=$SUBNET1" \
            -var "subnet2=$SUBNET2" \
            -var "subnet3=$SUBNET3"

      - name: Notify result to slack
        uses: homoluctus/slatify@master
        if: always()
        with:
          type: ${{ job.status }}
          job_name: '*Push Image to Amazon ECR*'
        env:
          SLACK_WEBHOOK: ${{ steps.set-secrets.outputs.SLACK_WEBHOOK_GH_NOTIFY }}
